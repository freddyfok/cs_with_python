Binary Search Tree (BST) property
Unlike a heap, it uses nodes with pointers to children instead of arrays

Types of Trees:
Full: descendant of the parent has to be 0 or 2
Complete: like a heap, you fill top to bottom, left to right
Perfect: complete and full tree, all leafs must be at same level, two descendants
Balanced binary tree: tree is balanced if the height of the tree is o(log n)

Example tree:
AVL tree - easiest algorithm to keep a tree balanced
Red black tree

Why Trees:
manipulate hierarchy
easy to search and sort data o(log n), worst complexity would be o(n)
everything left of a node is smaller, everything right of a node is greater

Functions:
insert(value) - inserts a node into the tree o(log n)
            Base case: if the root is null, add it there
            case 1: if value smaller than root value, go left then recurse if exist, else add
            case 2: if value greater than root value, go right then recurse if exist, else add

search(value) - search the tree with value o(log n)
            Base case: if the root is null, return False (include self.root)
            Case 1: if value is equal, return True
            Case 2: if value is smaller, go left then recursive call
            Case 3: if value is greater, go right then recursive call

get_height()  - find the height of the tree
            This means to find the largest number of edges from leaf to root
            Base case: if root is null, return -1
            get left subtree height by recursive call
            get right subtree height by recursive call
            return max(left, right) + 1

find_min/max - find the value of the minimum/maximum
            go all the way to the left of the tree
            if it doesnt have any child, the value in that node is the smallest

is_BST - determine if the tree is a BST
        base case: if self.root is empty, return True, empty tree is BST
        method 1: do a in order traversal, break when value isnt sorted
        method 2: set lower and upper bound and traverse down the tree

delete() - three conditions
        case 1: if it is a leaf node, just cut the link, del the node
        case 2: if it has one child, cut, replace the cut node with child node
        case 3: if there are two children, you can do one of the following
            - minimum of right subtree
            (picking minimum because the left most value in the subtree is always the smallest in the subtree)
            (normally at that point you'll have no left child, or one right child, which we know how to delete)
            - maximum of left subtree

        pseudo code:
        func delete(root, value):
            if root is None: // you want to return None
                return root
            if value is less than root.value:
                root.left = delete(root.left, value)
            else if value is greater than root.value:
                root.right = delete(root.right, value)
            else: // when the value is found
                if root.left is none:
                    return root.right // returning root.right means whoever recursively called will get this value
                else if root.right is none:
                    return root.left
                else:
                    root.value = min value of root.right (or max value of root.left)
                    root.right = delete(root.right, root.value)  (or left if left was used)
            return root


Depth first Traversal - you find everything in the leafs first
"Pre"order: "node", left, right
"In"order: left, "node", right
"Post": left, right, "node"

Breadth first traversal = you traverse by layer using a queue

